// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-NS388F7
// DateTime: 16/05/2017 4:52:56 AM
// UserName: xiong
// Input file <parser.y - 16/05/2017 1:02:02 AM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,NUMBER=129,IDENT=130,PUBLIC=131,CLASS=132,
    STATIC=133,VOID=134,INT=135,PRIVATE=136,PROTECTED=137};

public struct ValueType
#line 8 "parser.y"
{
    public int num;
    public string name;
    public CompilationUnit compUnit;
    public TypeDeclaration typeDecl;
    public NormalClassDeclaration normclassDecl;
    public ClassModifier classModi;  
    public Identifier identi;
    public ClassBody classBodi;
    public MethodDeclaration methDecl;
    public MethodModifier methModi;
    public Result result;
	public BlockStatement blksta;
	public MethodDeclarator methodecla;
	public MethodHeader methodhea;
	public ExpressionStatement expstm;
	public List<MethodModifier> methodmodilist;
	public List<BlockStatement> blkstas;
	public Block blk;


	
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 16/05/2017 1:02:02 AM
#line 4 "parser.y"
  public static Node root;
#line default
  // End verbatim content from parser.y - 16/05/2017 1:02:02 AM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[75];
  private static State[] states = new State[98];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "TypeDeclaration", "NormalClassDeclaration", "ClassModifier", 
      "Identifier", "ClassBody", "MethodModifier", "MethodDeclaration", "Result", 
      "BlockStatement", "MethodDeclarator", "MethodHeader", "ExpressionStatement", 
      "MethodModifiers", "BlockStatements", "MethodBody", "Block", "$accept", 
      "PackageDeclaration", "ImportDeclarations", "empty", "TypeParameters", 
      "FormalParameterList", "FormalParameter", "VariableModifiers", "UnannType", 
      "VariableDeclaratorId", "LocalVariableDeclarationStatement", "Statement", 
      "LocalVariableDeclaration", "VariableDeclarationList", "VariableModifier", 
      "UnannPrimitiveType", "UnannReferenceType", "UnannArrayType", "NumericType", 
      "IntegralType", "VariableDeclarator", "StatementWithoutTrailingSubstatement", 
      "StatementExpression", "Assignment", "LeftHandSide", "AssignmentOperator", 
      "Expression", "ExpressionName", "AssignmentExpression", "ConditionalExpression", 
      "ConditionalOrExpression", "ConditionalAndExpression", "InclusiveOrExpression", 
      "ExclusiveOrExpression", "AndExpression", "EqualityExpression", "RelationalExpression", 
      "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", 
      "UnaryExpressionNotPlusMinus", "PostfixExpression", "Primary", "PrimaryNoNewArray", 
      "Literal", "IntegerLiteral", };

  static Parser() {
    states[0] = new State(-3,new int[]{-1,1,-19,3,-21,97});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-3,new int[]{-20,4,-21,96});
    states[4] = new State(new int[]{131,95},new int[]{-2,5,-3,6,-4,7});
    states[5] = new State(-2);
    states[6] = new State(-6);
    states[7] = new State(new int[]{132,8});
    states[8] = new State(new int[]{130,89},new int[]{-5,9});
    states[9] = new State(-3,new int[]{-22,10,-21,94});
    states[10] = new State(new int[]{123,11});
    states[11] = new State(-3,new int[]{-6,12,-8,14,-14,15,-21,93});
    states[12] = new State(new int[]{125,13});
    states[13] = new State(-7);
    states[14] = new State(-11);
    states[15] = new State(new int[]{134,90,131,91,133,92},new int[]{-12,16,-7,77,-9,78});
    states[16] = new State(new int[]{123,19},new int[]{-16,17,-17,18});
    states[17] = new State(-13);
    states[18] = new State(-25);
    states[19] = new State(-3,new int[]{-15,20,-21,76});
    states[20] = new State(new int[]{125,21,130,75,135,-3},new int[]{-10,22,-28,23,-30,24,-25,26,-32,41,-21,43,-29,44,-39,45,-13,46,-40,47,-41,49,-42,50,-45,74});
    states[21] = new State(-26);
    states[22] = new State(-27);
    states[23] = new State(-29);
    states[24] = new State(new int[]{59,25});
    states[25] = new State(-31);
    states[26] = new State(new int[]{135,37,130,38},new int[]{-26,27,-33,32,-36,35,-37,36,-34,39,-35,40});
    states[27] = new State(new int[]{130,31},new int[]{-31,28,-38,29,-27,30});
    states[28] = new State(-32);
    states[29] = new State(-44);
    states[30] = new State(-45);
    states[31] = new State(-46);
    states[32] = new State(new int[]{91,33,130,-36});
    states[33] = new State(new int[]{93,34});
    states[34] = new State(-39);
    states[35] = new State(-40);
    states[36] = new State(-41);
    states[37] = new State(-42);
    states[38] = new State(-43);
    states[39] = new State(-37);
    states[40] = new State(-38);
    states[41] = new State(-3,new int[]{-25,42,-32,41,-21,43});
    states[42] = new State(-33);
    states[43] = new State(-34);
    states[44] = new State(-30);
    states[45] = new State(-47);
    states[46] = new State(-48);
    states[47] = new State(new int[]{59,48});
    states[48] = new State(-49);
    states[49] = new State(-50);
    states[50] = new State(new int[]{61,73},new int[]{-43,51});
    states[51] = new State(new int[]{129,72},new int[]{-44,52,-46,53,-47,54,-48,55,-49,56,-50,57,-51,58,-52,59,-53,60,-54,61,-55,62,-56,63,-57,64,-58,65,-59,66,-60,67,-61,68,-62,69,-63,70,-64,71});
    states[52] = new State(-51);
    states[53] = new State(-55);
    states[54] = new State(-56);
    states[55] = new State(-57);
    states[56] = new State(-58);
    states[57] = new State(-59);
    states[58] = new State(-60);
    states[59] = new State(-61);
    states[60] = new State(-62);
    states[61] = new State(-63);
    states[62] = new State(-64);
    states[63] = new State(-65);
    states[64] = new State(-66);
    states[65] = new State(-67);
    states[66] = new State(-68);
    states[67] = new State(-69);
    states[68] = new State(-70);
    states[69] = new State(-71);
    states[70] = new State(-72);
    states[71] = new State(-73);
    states[72] = new State(-74);
    states[73] = new State(-54);
    states[74] = new State(-52);
    states[75] = new State(-53);
    states[76] = new State(-28);
    states[77] = new State(-15);
    states[78] = new State(new int[]{130,89},new int[]{-11,79,-5,80});
    states[79] = new State(-19);
    states[80] = new State(new int[]{40,81});
    states[81] = new State(-3,new int[]{-23,82,-21,88});
    states[82] = new State(new int[]{41,83,135,-3,130,-3},new int[]{-24,84,-25,85,-32,41,-21,43});
    states[83] = new State(-21);
    states[84] = new State(-22);
    states[85] = new State(new int[]{135,37,130,38},new int[]{-26,86,-33,32,-36,35,-37,36,-34,39,-35,40});
    states[86] = new State(new int[]{130,31},new int[]{-27,87});
    states[87] = new State(-24);
    states[88] = new State(-23);
    states[89] = new State(-10);
    states[90] = new State(-20);
    states[91] = new State(-17);
    states[92] = new State(-18);
    states[93] = new State(new int[]{134,-16,131,-16,133,-16,125,-12});
    states[94] = new State(-9);
    states[95] = new State(-8);
    states[96] = new State(-5);
    states[97] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-18, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{-19,-20,-2});
    rules[3] = new Rule(-21, new int[]{});
    rules[4] = new Rule(-19, new int[]{-21});
    rules[5] = new Rule(-20, new int[]{-21});
    rules[6] = new Rule(-2, new int[]{-3});
    rules[7] = new Rule(-3, new int[]{-4,132,-5,-22,123,-6,125});
    rules[8] = new Rule(-4, new int[]{131});
    rules[9] = new Rule(-22, new int[]{-21});
    rules[10] = new Rule(-5, new int[]{130});
    rules[11] = new Rule(-6, new int[]{-8});
    rules[12] = new Rule(-6, new int[]{-21});
    rules[13] = new Rule(-8, new int[]{-14,-12,-16});
    rules[14] = new Rule(-8, new int[]{-21});
    rules[15] = new Rule(-14, new int[]{-14,-7});
    rules[16] = new Rule(-14, new int[]{-21});
    rules[17] = new Rule(-7, new int[]{131});
    rules[18] = new Rule(-7, new int[]{133});
    rules[19] = new Rule(-12, new int[]{-9,-11});
    rules[20] = new Rule(-9, new int[]{134});
    rules[21] = new Rule(-11, new int[]{-5,40,-23,41});
    rules[22] = new Rule(-23, new int[]{-23,-24});
    rules[23] = new Rule(-23, new int[]{-21});
    rules[24] = new Rule(-24, new int[]{-25,-26,-27});
    rules[25] = new Rule(-16, new int[]{-17});
    rules[26] = new Rule(-17, new int[]{123,-15,125});
    rules[27] = new Rule(-15, new int[]{-15,-10});
    rules[28] = new Rule(-15, new int[]{-21});
    rules[29] = new Rule(-10, new int[]{-28});
    rules[30] = new Rule(-10, new int[]{-29});
    rules[31] = new Rule(-28, new int[]{-30,59});
    rules[32] = new Rule(-30, new int[]{-25,-26,-31});
    rules[33] = new Rule(-25, new int[]{-32,-25});
    rules[34] = new Rule(-25, new int[]{-21});
    rules[35] = new Rule(-32, new int[]{-21});
    rules[36] = new Rule(-26, new int[]{-33});
    rules[37] = new Rule(-26, new int[]{-34});
    rules[38] = new Rule(-34, new int[]{-35});
    rules[39] = new Rule(-35, new int[]{-33,91,93});
    rules[40] = new Rule(-33, new int[]{-36});
    rules[41] = new Rule(-36, new int[]{-37});
    rules[42] = new Rule(-37, new int[]{135});
    rules[43] = new Rule(-37, new int[]{130});
    rules[44] = new Rule(-31, new int[]{-38});
    rules[45] = new Rule(-38, new int[]{-27});
    rules[46] = new Rule(-27, new int[]{130});
    rules[47] = new Rule(-29, new int[]{-39});
    rules[48] = new Rule(-39, new int[]{-13});
    rules[49] = new Rule(-13, new int[]{-40,59});
    rules[50] = new Rule(-40, new int[]{-41});
    rules[51] = new Rule(-41, new int[]{-42,-43,-44});
    rules[52] = new Rule(-42, new int[]{-45});
    rules[53] = new Rule(-45, new int[]{130});
    rules[54] = new Rule(-43, new int[]{61});
    rules[55] = new Rule(-44, new int[]{-46});
    rules[56] = new Rule(-46, new int[]{-47});
    rules[57] = new Rule(-47, new int[]{-48});
    rules[58] = new Rule(-48, new int[]{-49});
    rules[59] = new Rule(-49, new int[]{-50});
    rules[60] = new Rule(-50, new int[]{-51});
    rules[61] = new Rule(-51, new int[]{-52});
    rules[62] = new Rule(-52, new int[]{-53});
    rules[63] = new Rule(-53, new int[]{-54});
    rules[64] = new Rule(-54, new int[]{-55});
    rules[65] = new Rule(-55, new int[]{-56});
    rules[66] = new Rule(-56, new int[]{-57});
    rules[67] = new Rule(-57, new int[]{-58});
    rules[68] = new Rule(-58, new int[]{-59});
    rules[69] = new Rule(-59, new int[]{-60});
    rules[70] = new Rule(-60, new int[]{-61});
    rules[71] = new Rule(-61, new int[]{-62});
    rules[72] = new Rule(-62, new int[]{-63});
    rules[73] = new Rule(-63, new int[]{-64});
    rules[74] = new Rule(-64, new int[]{129});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> PackageDeclaration, ImportDeclarations, TypeDeclaration
#line 64 "parser.y"
                                                           { root =new CompilationUnit(null,null,ValueStack[ValueStack.Depth-1].typeDecl); }
#line default
        break;
      case 6: // TypeDeclaration -> NormalClassDeclaration
#line 78 "parser.y"
                            { CurrentSemanticValue.typeDecl = ValueStack[ValueStack.Depth-1].normclassDecl; }
#line default
        break;
      case 7: // NormalClassDeclaration -> ClassModifier, CLASS, Identifier, TypeParameters, '{', 
              //                           ClassBody, '}'
#line 82 "parser.y"
                                                                    {CurrentSemanticValue.normclassDecl = new NormalClassDeclaration(ValueStack[ValueStack.Depth-7].classModi,ValueStack[ValueStack.Depth-5].identi,ValueStack[ValueStack.Depth-2].classBodi);}
#line default
        break;
      case 10: // Identifier -> IDENT
#line 94 "parser.y"
          {CurrentSemanticValue.identi = new Identifier(ValueStack[ValueStack.Depth-1].name);}
#line default
        break;
      case 11: // ClassBody -> MethodDeclaration
#line 98 "parser.y"
                     {CurrentSemanticValue.classBodi = new ClassBody(ValueStack[ValueStack.Depth-1].methDecl);}
#line default
        break;
      case 13: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 103 "parser.y"
                                              {CurrentSemanticValue.methDecl = new MethodDeclaration(ValueStack[ValueStack.Depth-3].methodmodilist,ValueStack[ValueStack.Depth-2].methodhea,ValueStack[ValueStack.Depth-1].blk);}
#line default
        break;
      case 15: // MethodModifiers -> MethodModifiers, MethodModifier
#line 108 "parser.y"
                                  {}
#line default
        break;
      case 16: // MethodModifiers -> empty
#line 109 "parser.y"
                { CurrentSemanticValue.methodmodilist = new List<MethodModifier>(); }
#line default
        break;
      case 19: // MethodHeader -> Result, MethodDeclarator
#line 118 "parser.y"
                                    {CurrentSemanticValue.methodhea = new MethodHeader(ValueStack[ValueStack.Depth-2].result,ValueStack[ValueStack.Depth-1].methodecla);}
#line default
        break;
      case 21: // MethodDeclarator -> Identifier, '(', FormalParameterList, ')'
#line 126 "parser.y"
                                              {CurrentSemanticValue.methodecla = new MethodDeclarator(ValueStack[ValueStack.Depth-4].identi,null);}
#line default
        break;
      case 25: // MethodBody -> Block
#line 139 "parser.y"
            {CurrentSemanticValue.blk = ValueStack[ValueStack.Depth-1].blk;}
#line default
        break;
      case 26: // Block -> '{', BlockStatements, '}'
#line 143 "parser.y"
                                {CurrentSemanticValue.blk = new Block(ValueStack[ValueStack.Depth-2].blkstas);}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 288 "parser.y"
public Parser(Scanner scanner) : base(scanner)
{

}
#line default
}
}
